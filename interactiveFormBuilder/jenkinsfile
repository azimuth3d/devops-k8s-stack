def kubectlTest() {
    // Test that kubectl can correctly communication with the Kubernetes API
    echo "running kubectl test"
    sh "kubectl get nodes"
}

def helmLint(String chart_dir) {
    // lint helm chart
    sh "/usr/local/bin/helm lint ${chart_dir}"

}

def helmDeploy(Map args) {
    //configure helm client and confirm tiller process is installed

    if (args.dry_run) {
        println "Running dry-run deployment"

        sh "/usr/local/bin/helm upgrade --dry-run --debug --install ${args.name} ${args.chart_dir} --set ImageTag=${args.tag},Replicas=${args.replicas},Cpu=${args.cpu},Memory=${args.memory},DomainName=${args.name} --namespace=${args.name}"
    } else {
        println "Running deployment"
        sh "/usr/local/bin/helm upgrade --install ${args.name} ${args.chart_dir} --set ImageTag=${args.tag},Replicas=${args.replicas},Cpu=${args.cpu},Memory=${args.memory},DomainName=${args.name} --namespace=${args.name}"

        echo "Application ${args.name} successfully deployed. Use helm status ${args.name} to check"
    }

}

podTemplate(label: label, containers:[
  containerTemplate(name: 'node', image: 'node:9-alpine',command: 'cat', ttyEnabled: true)
  containerTemplate(name: 'docker', image: 'docker:stable',command: 'cat'. ttyEnabled: true)
  containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.8', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'helm', image: 'lachlanevenson/k8s-helm:latest', command: 'cat', ttyEnabled: true
])


stages {
  stage('test') {
    steps{
      container('')
    }
  }
  stage('build') {
    steps {
      container('docker') {
        sh('docker build . -t azimuth3d/interactive-form')
      }
    }
  }
  stage('deploy') {
    when {
      branch 'development'
    }
    steps {
      container('kubectl') {
         sh './development-deploy.sh'
      }
    }
  }
}
